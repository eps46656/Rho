#ifndef RHO__define_guard__Kernel__RayCastData_cuh
#define RHO__define_guard__Kernel__RayCastData_cuh

#include "init.cuh"

namespace rho {

struct RayCastData: public BNode {
	struct Phase {
		int value;

#///////////////////////////////////////////////////////////////////////////////

		RHO__cuda Phase(int value = 0);
		RHO__cuda Phase(bool fr, bool to);

#///////////////////////////////////////////////////////////////////////////////

		RHO__cuda Phase& operator=(const Phase& phase);

#///////////////////////////////////////////////////////////////////////////////

		RHO__cuda bool fr() const;
		RHO__cuda bool to() const;

		RHO__cuda void fr(bool fr);
		RHO__cuda void to(bool to);

		RHO__cuda void set(bool fr, bool to);

		RHO__cuda void reverse();
	};

#///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////

	const Domain* domain;

	Num t;
	Phase phase;

	size_t spare[RHO__max_dim];

#///////////////////////////////////////////////////////////////////////////////

	RHO__cuda RayCastData* prev() const;
	RHO__cuda RayCastData* next() const;

#///////////////////////////////////////////////////////////////////////////////

	RHO__cuda RayCastData();
	RHO__cuda RayCastData(const RayCastData& rcd);

	RHO__cuda operator bool() const;

	RHO__cuda ~RayCastData();

#///////////////////////////////////////////////////////////////////////////////

	RHO__cuda RayCastData& operator=(RayCastData& rcd);

#///////////////////////////////////////////////////////////////////////////////

	RHO__cuda void Destroy();
};

RHO__cuda bool operator==(const RayCastData& x, const RayCastData& y);
RHO__cuda bool operator==(const RayCastData& x, Num t);
RHO__cuda bool operator==(Num t, const RayCastData& x);

RHO__cuda bool operator<(const RayCastData& x, const RayCastData& y);
RHO__cuda bool operator<(Num t, const RayCastData& x);
RHO__cuda bool operator<(const RayCastData& x, Num t);
RHO__cuda bool operator<=(const RayCastData& x, const RayCastData& y);
RHO__cuda bool operator<=(Num t, const RayCastData& x);
RHO__cuda bool operator<=(const RayCastData& x, Num t);

#///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////
/*
class RayCastDataPool {
public:
	RHO__cuda size_t size() const;
	RHO__cuda bool empty() const;

#///////////////////////////////////////////////////////////////////////////////

	RHO__cuda RayCastDataPool();
	RHO__cuda ~RayCastDataPool();

#///////////////////////////////////////////////////////////////////////////////

	RHO__cuda void Push(RayCastData* rcd);
	RHO__cuda RayCastData* Pop();

	RHO__cuda void PushAll(BNode& rcdl);

private:
	size_t size_;
	BNode node_;
};*/

#///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////
/*
class RayCastDataList: public cntr::List<RayCastData*> {
public:
	RHO__cuda RayCastDataList(RayCastDataPool& pool);
	RHO__cuda virtual ~RayCastDataList();

private:
	RayCastDataPool* pool_;
}*/

}

#endif